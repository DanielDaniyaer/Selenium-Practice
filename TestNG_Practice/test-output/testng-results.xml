<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="8" passed="7" failed="1" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2023-03-02T20:36:52 EST" name="Suite" finished-at="2023-03-02T20:36:52 EST" duration-ms="54">
    <groups>
      <group name="Smoke">
        <method signature="day1.SecondDemo()[pri:0, instance:test.day1@184cf7cf]" name="SecondDemo" class="test.day1"/>
        <method signature="day3.loginAPI()[pri:0, instance:test.day3@2805c96b]" name="loginAPI" class="test.day3"/>
      </group> <!-- Smoke -->
    </groups>
    <test started-at="2023-03-02T20:36:52 EST" name="Test" finished-at="2023-03-02T20:36:52 EST" duration-ms="54">
      <class name="test.day2">
        <test-method is-config="true" signature="beforeMe()[pri:0, instance:test.day2@2fd6b6c7]" started-at="2023-03-02T20:36:52 EST" name="beforeMe" finished-at="2023-03-02T20:36:52 EST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMe -->
        <test-method signature="day2()[pri:0, instance:test.day2@2fd6b6c7]" started-at="2023-03-02T20:36:52 EST" name="day2" finished-at="2023-03-02T20:36:52 EST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- day2 -->
      </class> <!-- test.day2 -->
      <class name="test.day3">
        <test-method is-config="true" signature="beforeSu()[pri:0, instance:test.day3@2805c96b]" started-at="2023-03-02T20:36:52 EST" name="beforeSu" finished-at="2023-03-02T20:36:52 EST" duration-ms="6" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeSu -->
        <test-method signature="MobileLogin(java.lang.String, java.lang.String)[pri:0, instance:test.day3@2805c96b]" started-at="2023-03-02T20:36:52 EST" name="MobileLogin" data-provider="getData" finished-at="2023-03-02T20:36:52 EST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[firstUserName]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[firstPassword]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- MobileLogin -->
        <test-method signature="MobileLogin(java.lang.String, java.lang.String)[pri:0, instance:test.day3@2805c96b]" started-at="2023-03-02T20:36:52 EST" name="MobileLogin" data-provider="getData" finished-at="2023-03-02T20:36:52 EST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[SecondUserName]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[SecondPassword]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- MobileLogin -->
        <test-method signature="MobileLogin(java.lang.String, java.lang.String)[pri:0, instance:test.day3@2805c96b]" started-at="2023-03-02T20:36:52 EST" name="MobileLogin" data-provider="getData" finished-at="2023-03-02T20:36:52 EST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[ThirdUserName]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[ThirdPassword]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- MobileLogin -->
        <test-method signature="login()[pri:0, instance:test.day3@2805c96b]" started-at="2023-03-02T20:36:52 EST" name="login" finished-at="2023-03-02T20:36:52 EST" duration-ms="3" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at org.testng.Assert.assertTrue(Assert.java:55)
at test.day3.login(day3.java:15)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:567)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1507)
at org.testng.TestRunner.privateRun(TestRunner.java:764)
at org.testng.TestRunner.run(TestRunner.java:585)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.access$000(SuiteRunner.java:28)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:425)
at org.testng.internal.thread.ThreadUtil.lambda$execute$0(ThreadUtil.java:66)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
at java.base/java.lang.Thread.run(Thread.java:830)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- login -->
        <test-method signature="loginAPI()[pri:0, instance:test.day3@2805c96b]" started-at="2023-03-02T20:36:52 EST" name="loginAPI" finished-at="2023-03-02T20:36:52 EST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginAPI -->
        <test-method is-config="true" signature="afterSu()[pri:0, instance:test.day3@2805c96b]" started-at="2023-03-02T20:36:52 EST" name="afterSu" finished-at="2023-03-02T20:36:52 EST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterSu -->
      </class> <!-- test.day3 -->
      <class name="test.day1">
        <test-method is-config="true" signature="prere()[pri:0, instance:test.day1@184cf7cf]" started-at="2023-03-02T20:36:52 EST" name="prere" finished-at="2023-03-02T20:36:52 EST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- prere -->
        <test-method is-config="true" signature="beforeMe()[pri:0, instance:test.day1@184cf7cf]" started-at="2023-03-02T20:36:52 EST" name="beforeMe" finished-at="2023-03-02T20:36:52 EST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMe -->
        <test-method signature="Demo(java.lang.String)[pri:0, instance:test.day1@184cf7cf]" started-at="2023-03-02T20:36:52 EST" name="Demo" finished-at="2023-03-02T20:36:52 EST" duration-ms="5" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[https://www.google.com]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Demo -->
        <test-method is-config="true" signature="beforeMe()[pri:0, instance:test.day1@184cf7cf]" started-at="2023-03-02T20:36:52 EST" name="beforeMe" finished-at="2023-03-02T20:36:52 EST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMe -->
        <test-method signature="SecondDemo()[pri:0, instance:test.day1@184cf7cf]" started-at="2023-03-02T20:36:52 EST" name="SecondDemo" finished-at="2023-03-02T20:36:52 EST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SecondDemo -->
        <test-method is-config="true" signature="lastOne()[pri:0, instance:test.day1@184cf7cf]" started-at="2023-03-02T20:36:52 EST" name="lastOne" finished-at="2023-03-02T20:36:52 EST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- lastOne -->
      </class> <!-- test.day1 -->
    </test> <!-- Test -->
  </suite> <!-- Suite -->
</testng-results>
